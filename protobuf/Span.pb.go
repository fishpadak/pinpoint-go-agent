// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: v1/Span.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PSpanMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//
	//	*PSpanMessage_Span
	//	*PSpanMessage_SpanChunk
	Field isPSpanMessage_Field `protobuf_oneof:"field"`
}

func (x *PSpanMessage) Reset() {
	*x = PSpanMessage{}
	mi := &file_v1_Span_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSpanMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSpanMessage) ProtoMessage() {}

func (x *PSpanMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSpanMessage.ProtoReflect.Descriptor instead.
func (*PSpanMessage) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{0}
}

func (m *PSpanMessage) GetField() isPSpanMessage_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *PSpanMessage) GetSpan() *PSpan {
	if x, ok := x.GetField().(*PSpanMessage_Span); ok {
		return x.Span
	}
	return nil
}

func (x *PSpanMessage) GetSpanChunk() *PSpanChunk {
	if x, ok := x.GetField().(*PSpanMessage_SpanChunk); ok {
		return x.SpanChunk
	}
	return nil
}

type isPSpanMessage_Field interface {
	isPSpanMessage_Field()
}

type PSpanMessage_Span struct {
	Span *PSpan `protobuf:"bytes,1,opt,name=span,proto3,oneof"`
}

type PSpanMessage_SpanChunk struct {
	SpanChunk *PSpanChunk `protobuf:"bytes,2,opt,name=spanChunk,proto3,oneof"`
}

func (*PSpanMessage_Span) isPSpanMessage_Field() {}

func (*PSpanMessage_SpanChunk) isPSpanMessage_Field() {}

type PSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	TransactionId *PTransactionId `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	SpanId        int64           `protobuf:"fixed64,3,opt,name=spanId,proto3" json:"spanId,omitempty"`
	ParentSpanId  int64           `protobuf:"fixed64,4,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	// span event's startTimestamp
	StartTime              int64            `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Elapsed                int32            `protobuf:"varint,6,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	ApiId                  int32            `protobuf:"varint,7,opt,name=apiId,proto3" json:"apiId,omitempty"`
	ServiceType            int32            `protobuf:"varint,8,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	AcceptEvent            *PAcceptEvent    `protobuf:"bytes,9,opt,name=acceptEvent,proto3" json:"acceptEvent,omitempty"`
	Annotation             []*PAnnotation   `protobuf:"bytes,10,rep,name=annotation,proto3" json:"annotation,omitempty"`
	Flag                   int32            `protobuf:"varint,11,opt,name=flag,proto3" json:"flag,omitempty"`
	Err                    int32            `protobuf:"zigzag32,12,opt,name=err,proto3" json:"err,omitempty"`
	SpanEvent              []*PSpanEvent    `protobuf:"bytes,13,rep,name=spanEvent,proto3" json:"spanEvent,omitempty"`
	ExceptionInfo          *PIntStringValue `protobuf:"bytes,14,opt,name=exceptionInfo,proto3" json:"exceptionInfo,omitempty"`
	ApplicationServiceType int32            `protobuf:"varint,15,opt,name=applicationServiceType,proto3" json:"applicationServiceType,omitempty"`
	LoggingTransactionInfo int32            `protobuf:"varint,16,opt,name=loggingTransactionInfo,proto3" json:"loggingTransactionInfo,omitempty"`
}

func (x *PSpan) Reset() {
	*x = PSpan{}
	mi := &file_v1_Span_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSpan) ProtoMessage() {}

func (x *PSpan) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSpan.ProtoReflect.Descriptor instead.
func (*PSpan) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{1}
}

func (x *PSpan) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PSpan) GetTransactionId() *PTransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PSpan) GetSpanId() int64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *PSpan) GetParentSpanId() int64 {
	if x != nil {
		return x.ParentSpanId
	}
	return 0
}

func (x *PSpan) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PSpan) GetElapsed() int32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *PSpan) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *PSpan) GetServiceType() int32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *PSpan) GetAcceptEvent() *PAcceptEvent {
	if x != nil {
		return x.AcceptEvent
	}
	return nil
}

func (x *PSpan) GetAnnotation() []*PAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *PSpan) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *PSpan) GetErr() int32 {
	if x != nil {
		return x.Err
	}
	return 0
}

func (x *PSpan) GetSpanEvent() []*PSpanEvent {
	if x != nil {
		return x.SpanEvent
	}
	return nil
}

func (x *PSpan) GetExceptionInfo() *PIntStringValue {
	if x != nil {
		return x.ExceptionInfo
	}
	return nil
}

func (x *PSpan) GetApplicationServiceType() int32 {
	if x != nil {
		return x.ApplicationServiceType
	}
	return 0
}

func (x *PSpan) GetLoggingTransactionInfo() int32 {
	if x != nil {
		return x.LoggingTransactionInfo
	}
	return 0
}

type PTransactionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identical to agentId if null
	AgentId        string `protobuf:"bytes,1,opt,name=agentId,proto3" json:"agentId,omitempty"` //nullable
	AgentStartTime int64  `protobuf:"varint,2,opt,name=agentStartTime,proto3" json:"agentStartTime,omitempty"`
	Sequence       int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PTransactionId) Reset() {
	*x = PTransactionId{}
	mi := &file_v1_Span_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PTransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTransactionId) ProtoMessage() {}

func (x *PTransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTransactionId.ProtoReflect.Descriptor instead.
func (*PTransactionId) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{2}
}

func (x *PTransactionId) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *PTransactionId) GetAgentStartTime() int64 {
	if x != nil {
		return x.AgentStartTime
	}
	return 0
}

func (x *PTransactionId) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type PAcceptEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rpc        string       `protobuf:"bytes,1,opt,name=rpc,proto3" json:"rpc,omitempty"`
	EndPoint   string       `protobuf:"bytes,2,opt,name=endPoint,proto3" json:"endPoint,omitempty"`
	RemoteAddr string       `protobuf:"bytes,3,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	ParentInfo *PParentInfo `protobuf:"bytes,4,opt,name=parentInfo,proto3" json:"parentInfo,omitempty"`
}

func (x *PAcceptEvent) Reset() {
	*x = PAcceptEvent{}
	mi := &file_v1_Span_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PAcceptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAcceptEvent) ProtoMessage() {}

func (x *PAcceptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAcceptEvent.ProtoReflect.Descriptor instead.
func (*PAcceptEvent) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{3}
}

func (x *PAcceptEvent) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *PAcceptEvent) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *PAcceptEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *PAcceptEvent) GetParentInfo() *PParentInfo {
	if x != nil {
		return x.ParentInfo
	}
	return nil
}

type PParentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentApplicationName string `protobuf:"bytes,1,opt,name=parentApplicationName,proto3" json:"parentApplicationName,omitempty"`
	ParentApplicationType int32  `protobuf:"varint,2,opt,name=parentApplicationType,proto3" json:"parentApplicationType,omitempty"`
	AcceptorHost          string `protobuf:"bytes,3,opt,name=acceptorHost,proto3" json:"acceptorHost,omitempty"`
}

func (x *PParentInfo) Reset() {
	*x = PParentInfo{}
	mi := &file_v1_Span_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PParentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PParentInfo) ProtoMessage() {}

func (x *PParentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PParentInfo.ProtoReflect.Descriptor instead.
func (*PParentInfo) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{4}
}

func (x *PParentInfo) GetParentApplicationName() string {
	if x != nil {
		return x.ParentApplicationName
	}
	return ""
}

func (x *PParentInfo) GetParentApplicationType() int32 {
	if x != nil {
		return x.ParentApplicationType
	}
	return 0
}

func (x *PParentInfo) GetAcceptorHost() string {
	if x != nil {
		return x.AcceptorHost
	}
	return ""
}

type PLocalAsyncId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsyncId  int32 `protobuf:"varint,1,opt,name=asyncId,proto3" json:"asyncId,omitempty"`
	Sequence int32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PLocalAsyncId) Reset() {
	*x = PLocalAsyncId{}
	mi := &file_v1_Span_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PLocalAsyncId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLocalAsyncId) ProtoMessage() {}

func (x *PLocalAsyncId) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLocalAsyncId.ProtoReflect.Descriptor instead.
func (*PLocalAsyncId) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{5}
}

func (x *PLocalAsyncId) GetAsyncId() int32 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *PLocalAsyncId) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type PSpanEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence      int32            `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Depth         int32            `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	StartElapsed  int32            `protobuf:"varint,3,opt,name=startElapsed,proto3" json:"startElapsed,omitempty"`
	EndElapsed    int32            `protobuf:"varint,4,opt,name=endElapsed,proto3" json:"endElapsed,omitempty"`
	ServiceType   int32            `protobuf:"zigzag32,5,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	Annotation    []*PAnnotation   `protobuf:"bytes,6,rep,name=annotation,proto3" json:"annotation,omitempty"`
	ApiId         int32            `protobuf:"zigzag32,10,opt,name=apiId,proto3" json:"apiId,omitempty"`
	ExceptionInfo *PIntStringValue `protobuf:"bytes,11,opt,name=exceptionInfo,proto3" json:"exceptionInfo,omitempty"`
	NextEvent     *PNextEvent      `protobuf:"bytes,12,opt,name=nextEvent,proto3" json:"nextEvent,omitempty"`
	AsyncEvent    int32            `protobuf:"varint,13,opt,name=asyncEvent,proto3" json:"asyncEvent,omitempty"`
}

func (x *PSpanEvent) Reset() {
	*x = PSpanEvent{}
	mi := &file_v1_Span_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSpanEvent) ProtoMessage() {}

func (x *PSpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSpanEvent.ProtoReflect.Descriptor instead.
func (*PSpanEvent) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{6}
}

func (x *PSpanEvent) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PSpanEvent) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *PSpanEvent) GetStartElapsed() int32 {
	if x != nil {
		return x.StartElapsed
	}
	return 0
}

func (x *PSpanEvent) GetEndElapsed() int32 {
	if x != nil {
		return x.EndElapsed
	}
	return 0
}

func (x *PSpanEvent) GetServiceType() int32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *PSpanEvent) GetAnnotation() []*PAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *PSpanEvent) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *PSpanEvent) GetExceptionInfo() *PIntStringValue {
	if x != nil {
		return x.ExceptionInfo
	}
	return nil
}

func (x *PSpanEvent) GetNextEvent() *PNextEvent {
	if x != nil {
		return x.NextEvent
	}
	return nil
}

func (x *PSpanEvent) GetAsyncEvent() int32 {
	if x != nil {
		return x.AsyncEvent
	}
	return 0
}

type PNextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//
	//	*PNextEvent_MessageEvent
	Field isPNextEvent_Field `protobuf_oneof:"field"`
}

func (x *PNextEvent) Reset() {
	*x = PNextEvent{}
	mi := &file_v1_Span_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PNextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNextEvent) ProtoMessage() {}

func (x *PNextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNextEvent.ProtoReflect.Descriptor instead.
func (*PNextEvent) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{7}
}

func (m *PNextEvent) GetField() isPNextEvent_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *PNextEvent) GetMessageEvent() *PMessageEvent {
	if x, ok := x.GetField().(*PNextEvent_MessageEvent); ok {
		return x.MessageEvent
	}
	return nil
}

type isPNextEvent_Field interface {
	isPNextEvent_Field()
}

type PNextEvent_MessageEvent struct {
	MessageEvent *PMessageEvent `protobuf:"bytes,1,opt,name=messageEvent,proto3,oneof"`
}

func (*PNextEvent_MessageEvent) isPNextEvent_Field() {}

type PMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextSpanId    int64  `protobuf:"fixed64,1,opt,name=nextSpanId,proto3" json:"nextSpanId,omitempty"`
	EndPoint      string `protobuf:"bytes,2,opt,name=endPoint,proto3" json:"endPoint,omitempty"`
	DestinationId string `protobuf:"bytes,3,opt,name=destinationId,proto3" json:"destinationId,omitempty"`
}

func (x *PMessageEvent) Reset() {
	*x = PMessageEvent{}
	mi := &file_v1_Span_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMessageEvent) ProtoMessage() {}

func (x *PMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMessageEvent.ProtoReflect.Descriptor instead.
func (*PMessageEvent) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{8}
}

func (x *PMessageEvent) GetNextSpanId() int64 {
	if x != nil {
		return x.NextSpanId
	}
	return 0
}

func (x *PMessageEvent) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *PMessageEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type PSpanChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	TransactionId          *PTransactionId `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	SpanId                 int64           `protobuf:"fixed64,3,opt,name=spanId,proto3" json:"spanId,omitempty"`
	EndPoint               string          `protobuf:"bytes,4,opt,name=endPoint,proto3" json:"endPoint,omitempty"`
	SpanEvent              []*PSpanEvent   `protobuf:"bytes,5,rep,name=spanEvent,proto3" json:"spanEvent,omitempty"`
	ApplicationServiceType int32           `protobuf:"varint,6,opt,name=applicationServiceType,proto3" json:"applicationServiceType,omitempty"`
	KeyTime                int64           `protobuf:"varint,7,opt,name=keyTime,proto3" json:"keyTime,omitempty"`
	LocalAsyncId           *PLocalAsyncId  `protobuf:"bytes,8,opt,name=localAsyncId,proto3" json:"localAsyncId,omitempty"`
}

func (x *PSpanChunk) Reset() {
	*x = PSpanChunk{}
	mi := &file_v1_Span_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSpanChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSpanChunk) ProtoMessage() {}

func (x *PSpanChunk) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSpanChunk.ProtoReflect.Descriptor instead.
func (*PSpanChunk) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{9}
}

func (x *PSpanChunk) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PSpanChunk) GetTransactionId() *PTransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PSpanChunk) GetSpanId() int64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *PSpanChunk) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *PSpanChunk) GetSpanEvent() []*PSpanEvent {
	if x != nil {
		return x.SpanEvent
	}
	return nil
}

func (x *PSpanChunk) GetApplicationServiceType() int32 {
	if x != nil {
		return x.ApplicationServiceType
	}
	return 0
}

func (x *PSpanChunk) GetKeyTime() int64 {
	if x != nil {
		return x.KeyTime
	}
	return 0
}

func (x *PSpanChunk) GetLocalAsyncId() *PLocalAsyncId {
	if x != nil {
		return x.LocalAsyncId
	}
	return nil
}

type PResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PResult) Reset() {
	*x = PResult{}
	mi := &file_v1_Span_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PResult) ProtoMessage() {}

func (x *PResult) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PResult.ProtoReflect.Descriptor instead.
func (*PResult) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{10}
}

func (x *PResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PSqlMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlId int32  `protobuf:"varint,1,opt,name=sqlId,proto3" json:"sqlId,omitempty"`
	Sql   string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *PSqlMetaData) Reset() {
	*x = PSqlMetaData{}
	mi := &file_v1_Span_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSqlMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSqlMetaData) ProtoMessage() {}

func (x *PSqlMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSqlMetaData.ProtoReflect.Descriptor instead.
func (*PSqlMetaData) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{11}
}

func (x *PSqlMetaData) GetSqlId() int32 {
	if x != nil {
		return x.SqlId
	}
	return 0
}

func (x *PSqlMetaData) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type PSqlUidMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlUid []byte `protobuf:"bytes,1,opt,name=sqlUid,proto3" json:"sqlUid,omitempty"`
	Sql    string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *PSqlUidMetaData) Reset() {
	*x = PSqlUidMetaData{}
	mi := &file_v1_Span_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PSqlUidMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSqlUidMetaData) ProtoMessage() {}

func (x *PSqlUidMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSqlUidMetaData.ProtoReflect.Descriptor instead.
func (*PSqlUidMetaData) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{12}
}

func (x *PSqlUidMetaData) GetSqlUid() []byte {
	if x != nil {
		return x.SqlUid
	}
	return nil
}

func (x *PSqlUidMetaData) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type PApiMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId    int32  `protobuf:"varint,1,opt,name=apiId,proto3" json:"apiId,omitempty"`
	ApiInfo  string `protobuf:"bytes,2,opt,name=apiInfo,proto3" json:"apiInfo,omitempty"`
	Line     int32  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Type     int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PApiMetaData) Reset() {
	*x = PApiMetaData{}
	mi := &file_v1_Span_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PApiMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PApiMetaData) ProtoMessage() {}

func (x *PApiMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PApiMetaData.ProtoReflect.Descriptor instead.
func (*PApiMetaData) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{13}
}

func (x *PApiMetaData) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *PApiMetaData) GetApiInfo() string {
	if x != nil {
		return x.ApiInfo
	}
	return ""
}

func (x *PApiMetaData) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *PApiMetaData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PApiMetaData) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type PStringMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringId    int32  `protobuf:"varint,1,opt,name=stringId,proto3" json:"stringId,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
}

func (x *PStringMetaData) Reset() {
	*x = PStringMetaData{}
	mi := &file_v1_Span_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PStringMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PStringMetaData) ProtoMessage() {}

func (x *PStringMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PStringMetaData.ProtoReflect.Descriptor instead.
func (*PStringMetaData) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{14}
}

func (x *PStringMetaData) GetStringId() int32 {
	if x != nil {
		return x.StringId
	}
	return 0
}

func (x *PStringMetaData) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type PExceptionMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exceptions    []*PException   `protobuf:"bytes,1,rep,name=exceptions,proto3" json:"exceptions,omitempty"`
	TransactionId *PTransactionId `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	SpanId        int64           `protobuf:"fixed64,3,opt,name=spanId,proto3" json:"spanId,omitempty"`
	UriTemplate   string          `protobuf:"bytes,4,opt,name=uriTemplate,proto3" json:"uriTemplate,omitempty"`
}

func (x *PExceptionMetaData) Reset() {
	*x = PExceptionMetaData{}
	mi := &file_v1_Span_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PExceptionMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PExceptionMetaData) ProtoMessage() {}

func (x *PExceptionMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PExceptionMetaData.ProtoReflect.Descriptor instead.
func (*PExceptionMetaData) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{15}
}

func (x *PExceptionMetaData) GetExceptions() []*PException {
	if x != nil {
		return x.Exceptions
	}
	return nil
}

func (x *PExceptionMetaData) GetTransactionId() *PTransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PExceptionMetaData) GetSpanId() int64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *PExceptionMetaData) GetUriTemplate() string {
	if x != nil {
		return x.UriTemplate
	}
	return ""
}

type PException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExceptionClassName string                `protobuf:"bytes,1,opt,name=exceptionClassName,proto3" json:"exceptionClassName,omitempty"`
	ExceptionMessage   string                `protobuf:"bytes,2,opt,name=exceptionMessage,proto3" json:"exceptionMessage,omitempty"`
	StartTime          int64                 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ExceptionId        int64                 `protobuf:"varint,4,opt,name=exceptionId,proto3" json:"exceptionId,omitempty"`
	ExceptionDepth     int32                 `protobuf:"varint,5,opt,name=exceptionDepth,proto3" json:"exceptionDepth,omitempty"`
	StackTraceElement  []*PStackTraceElement `protobuf:"bytes,6,rep,name=stackTraceElement,proto3" json:"stackTraceElement,omitempty"`
}

func (x *PException) Reset() {
	*x = PException{}
	mi := &file_v1_Span_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PException) ProtoMessage() {}

func (x *PException) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PException.ProtoReflect.Descriptor instead.
func (*PException) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{16}
}

func (x *PException) GetExceptionClassName() string {
	if x != nil {
		return x.ExceptionClassName
	}
	return ""
}

func (x *PException) GetExceptionMessage() string {
	if x != nil {
		return x.ExceptionMessage
	}
	return ""
}

func (x *PException) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PException) GetExceptionId() int64 {
	if x != nil {
		return x.ExceptionId
	}
	return 0
}

func (x *PException) GetExceptionDepth() int32 {
	if x != nil {
		return x.ExceptionDepth
	}
	return 0
}

func (x *PException) GetStackTraceElement() []*PStackTraceElement {
	if x != nil {
		return x.StackTraceElement
	}
	return nil
}

type PStackTraceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName  string `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	LineNumber int32  `protobuf:"varint,3,opt,name=lineNumber,proto3" json:"lineNumber,omitempty"`
	MethodName string `protobuf:"bytes,4,opt,name=methodName,proto3" json:"methodName,omitempty"`
}

func (x *PStackTraceElement) Reset() {
	*x = PStackTraceElement{}
	mi := &file_v1_Span_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PStackTraceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PStackTraceElement) ProtoMessage() {}

func (x *PStackTraceElement) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Span_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PStackTraceElement.ProtoReflect.Descriptor instead.
func (*PStackTraceElement) Descriptor() ([]byte, []int) {
	return file_v1_Span_proto_rawDescGZIP(), []int{17}
}

func (x *PStackTraceElement) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PStackTraceElement) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PStackTraceElement) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *PStackTraceElement) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

var File_v1_Span_proto protoreflect.FileDescriptor

var file_v1_Span_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x0c, 0x50, 0x53, 0x70, 0x61,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x53, 0x70, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0xf3, 0x04, 0x0a, 0x05, 0x50, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x10, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x2c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x49, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x0e, 0x50, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x50, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x70, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x50, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0x45, 0x0a, 0x0d, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0a, 0x50, 0x53, 0x70, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x49, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4e,
	0x0a, 0x0a, 0x50, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x75,
	0x0a, 0x0d, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x10, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x0a, 0x50, 0x53, 0x70, 0x61, 0x6e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x10, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x70,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x07, 0x50, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x50, 0x53, 0x71, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x22, 0x3b,
	0x0a, 0x0f, 0x50, 0x53, 0x71, 0x6c, 0x55, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x6c, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x50, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x0f, 0x50, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x50, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x10, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x72, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x72, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x96, 0x02, 0x0a, 0x0a, 0x50, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x50, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x35, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x61, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x70, 0x69, 0x6e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42,
	0x09, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x03, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_Span_proto_rawDescOnce sync.Once
	file_v1_Span_proto_rawDescData = file_v1_Span_proto_rawDesc
)

func file_v1_Span_proto_rawDescGZIP() []byte {
	file_v1_Span_proto_rawDescOnce.Do(func() {
		file_v1_Span_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_Span_proto_rawDescData)
	})
	return file_v1_Span_proto_rawDescData
}

var file_v1_Span_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_v1_Span_proto_goTypes = []any{
	(*PSpanMessage)(nil),       // 0: v1.PSpanMessage
	(*PSpan)(nil),              // 1: v1.PSpan
	(*PTransactionId)(nil),     // 2: v1.PTransactionId
	(*PAcceptEvent)(nil),       // 3: v1.PAcceptEvent
	(*PParentInfo)(nil),        // 4: v1.PParentInfo
	(*PLocalAsyncId)(nil),      // 5: v1.PLocalAsyncId
	(*PSpanEvent)(nil),         // 6: v1.PSpanEvent
	(*PNextEvent)(nil),         // 7: v1.PNextEvent
	(*PMessageEvent)(nil),      // 8: v1.PMessageEvent
	(*PSpanChunk)(nil),         // 9: v1.PSpanChunk
	(*PResult)(nil),            // 10: v1.PResult
	(*PSqlMetaData)(nil),       // 11: v1.PSqlMetaData
	(*PSqlUidMetaData)(nil),    // 12: v1.PSqlUidMetaData
	(*PApiMetaData)(nil),       // 13: v1.PApiMetaData
	(*PStringMetaData)(nil),    // 14: v1.PStringMetaData
	(*PExceptionMetaData)(nil), // 15: v1.PExceptionMetaData
	(*PException)(nil),         // 16: v1.PException
	(*PStackTraceElement)(nil), // 17: v1.PStackTraceElement
	(*PAnnotation)(nil),        // 18: v1.PAnnotation
	(*PIntStringValue)(nil),    // 19: v1.PIntStringValue
}
var file_v1_Span_proto_depIdxs = []int32{
	1,  // 0: v1.PSpanMessage.span:type_name -> v1.PSpan
	9,  // 1: v1.PSpanMessage.spanChunk:type_name -> v1.PSpanChunk
	2,  // 2: v1.PSpan.transactionId:type_name -> v1.PTransactionId
	3,  // 3: v1.PSpan.acceptEvent:type_name -> v1.PAcceptEvent
	18, // 4: v1.PSpan.annotation:type_name -> v1.PAnnotation
	6,  // 5: v1.PSpan.spanEvent:type_name -> v1.PSpanEvent
	19, // 6: v1.PSpan.exceptionInfo:type_name -> v1.PIntStringValue
	4,  // 7: v1.PAcceptEvent.parentInfo:type_name -> v1.PParentInfo
	18, // 8: v1.PSpanEvent.annotation:type_name -> v1.PAnnotation
	19, // 9: v1.PSpanEvent.exceptionInfo:type_name -> v1.PIntStringValue
	7,  // 10: v1.PSpanEvent.nextEvent:type_name -> v1.PNextEvent
	8,  // 11: v1.PNextEvent.messageEvent:type_name -> v1.PMessageEvent
	2,  // 12: v1.PSpanChunk.transactionId:type_name -> v1.PTransactionId
	6,  // 13: v1.PSpanChunk.spanEvent:type_name -> v1.PSpanEvent
	5,  // 14: v1.PSpanChunk.localAsyncId:type_name -> v1.PLocalAsyncId
	16, // 15: v1.PExceptionMetaData.exceptions:type_name -> v1.PException
	2,  // 16: v1.PExceptionMetaData.transactionId:type_name -> v1.PTransactionId
	17, // 17: v1.PException.stackTraceElement:type_name -> v1.PStackTraceElement
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_v1_Span_proto_init() }
func file_v1_Span_proto_init() {
	if File_v1_Span_proto != nil {
		return
	}
	file_v1_Annotation_proto_init()
	file_v1_Span_proto_msgTypes[0].OneofWrappers = []any{
		(*PSpanMessage_Span)(nil),
		(*PSpanMessage_SpanChunk)(nil),
	}
	file_v1_Span_proto_msgTypes[7].OneofWrappers = []any{
		(*PNextEvent_MessageEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_Span_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_Span_proto_goTypes,
		DependencyIndexes: file_v1_Span_proto_depIdxs,
		MessageInfos:      file_v1_Span_proto_msgTypes,
	}.Build()
	File_v1_Span_proto = out.File
	file_v1_Span_proto_rawDesc = nil
	file_v1_Span_proto_goTypes = nil
	file_v1_Span_proto_depIdxs = nil
}
