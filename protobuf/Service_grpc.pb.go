// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: v1/Service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Span_SendSpan_FullMethodName = "/v1.Span/SendSpan"
)

// SpanClient is the client API for Span service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpanClient interface {
	SendSpan(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PSpanMessage, emptypb.Empty], error)
}

type spanClient struct {
	cc grpc.ClientConnInterface
}

func NewSpanClient(cc grpc.ClientConnInterface) SpanClient {
	return &spanClient{cc}
}

func (c *spanClient) SendSpan(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PSpanMessage, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Span_ServiceDesc.Streams[0], Span_SendSpan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PSpanMessage, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Span_SendSpanClient = grpc.ClientStreamingClient[PSpanMessage, emptypb.Empty]

// SpanServer is the server API for Span service.
// All implementations must embed UnimplementedSpanServer
// for forward compatibility.
type SpanServer interface {
	SendSpan(grpc.ClientStreamingServer[PSpanMessage, emptypb.Empty]) error
	mustEmbedUnimplementedSpanServer()
}

// UnimplementedSpanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpanServer struct{}

func (UnimplementedSpanServer) SendSpan(grpc.ClientStreamingServer[PSpanMessage, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendSpan not implemented")
}
func (UnimplementedSpanServer) mustEmbedUnimplementedSpanServer() {}
func (UnimplementedSpanServer) testEmbeddedByValue()              {}

// UnsafeSpanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpanServer will
// result in compilation errors.
type UnsafeSpanServer interface {
	mustEmbedUnimplementedSpanServer()
}

func RegisterSpanServer(s grpc.ServiceRegistrar, srv SpanServer) {
	// If the following call pancis, it indicates UnimplementedSpanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Span_ServiceDesc, srv)
}

func _Span_SendSpan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpanServer).SendSpan(&grpc.GenericServerStream[PSpanMessage, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Span_SendSpanServer = grpc.ClientStreamingServer[PSpanMessage, emptypb.Empty]

// Span_ServiceDesc is the grpc.ServiceDesc for Span service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Span_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Span",
	HandlerType: (*SpanServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendSpan",
			Handler:       _Span_SendSpan_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/Service.proto",
}

const (
	Agent_RequestAgentInfo_FullMethodName = "/v1.Agent/RequestAgentInfo"
	Agent_PingSession_FullMethodName      = "/v1.Agent/PingSession"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	RequestAgentInfo(ctx context.Context, in *PAgentInfo, opts ...grpc.CallOption) (*PResult, error)
	PingSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PPing, PPing], error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) RequestAgentInfo(ctx context.Context, in *PAgentInfo, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Agent_RequestAgentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PingSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PPing, PPing], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_PingSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PPing, PPing]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_PingSessionClient = grpc.BidiStreamingClient[PPing, PPing]

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	RequestAgentInfo(context.Context, *PAgentInfo) (*PResult, error)
	PingSession(grpc.BidiStreamingServer[PPing, PPing]) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) RequestAgentInfo(context.Context, *PAgentInfo) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAgentInfo not implemented")
}
func (UnimplementedAgentServer) PingSession(grpc.BidiStreamingServer[PPing, PPing]) error {
	return status.Errorf(codes.Unimplemented, "method PingSession not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_RequestAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PAgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RequestAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RequestAgentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RequestAgentInfo(ctx, req.(*PAgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PingSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).PingSession(&grpc.GenericServerStream[PPing, PPing]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_PingSessionServer = grpc.BidiStreamingServer[PPing, PPing]

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAgentInfo",
			Handler:    _Agent_RequestAgentInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingSession",
			Handler:       _Agent_PingSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/Service.proto",
}

const (
	Metadata_RequestSqlMetaData_FullMethodName       = "/v1.Metadata/RequestSqlMetaData"
	Metadata_RequestSqlUidMetaData_FullMethodName    = "/v1.Metadata/RequestSqlUidMetaData"
	Metadata_RequestApiMetaData_FullMethodName       = "/v1.Metadata/RequestApiMetaData"
	Metadata_RequestStringMetaData_FullMethodName    = "/v1.Metadata/RequestStringMetaData"
	Metadata_RequestExceptionMetaData_FullMethodName = "/v1.Metadata/RequestExceptionMetaData"
)

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	RequestSqlMetaData(ctx context.Context, in *PSqlMetaData, opts ...grpc.CallOption) (*PResult, error)
	RequestSqlUidMetaData(ctx context.Context, in *PSqlUidMetaData, opts ...grpc.CallOption) (*PResult, error)
	RequestApiMetaData(ctx context.Context, in *PApiMetaData, opts ...grpc.CallOption) (*PResult, error)
	RequestStringMetaData(ctx context.Context, in *PStringMetaData, opts ...grpc.CallOption) (*PResult, error)
	RequestExceptionMetaData(ctx context.Context, in *PExceptionMetaData, opts ...grpc.CallOption) (*PResult, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) RequestSqlMetaData(ctx context.Context, in *PSqlMetaData, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Metadata_RequestSqlMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RequestSqlUidMetaData(ctx context.Context, in *PSqlUidMetaData, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Metadata_RequestSqlUidMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RequestApiMetaData(ctx context.Context, in *PApiMetaData, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Metadata_RequestApiMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RequestStringMetaData(ctx context.Context, in *PStringMetaData, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Metadata_RequestStringMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RequestExceptionMetaData(ctx context.Context, in *PExceptionMetaData, opts ...grpc.CallOption) (*PResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PResult)
	err := c.cc.Invoke(ctx, Metadata_RequestExceptionMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations must embed UnimplementedMetadataServer
// for forward compatibility.
type MetadataServer interface {
	RequestSqlMetaData(context.Context, *PSqlMetaData) (*PResult, error)
	RequestSqlUidMetaData(context.Context, *PSqlUidMetaData) (*PResult, error)
	RequestApiMetaData(context.Context, *PApiMetaData) (*PResult, error)
	RequestStringMetaData(context.Context, *PStringMetaData) (*PResult, error)
	RequestExceptionMetaData(context.Context, *PExceptionMetaData) (*PResult, error)
	mustEmbedUnimplementedMetadataServer()
}

// UnimplementedMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServer struct{}

func (UnimplementedMetadataServer) RequestSqlMetaData(context.Context, *PSqlMetaData) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSqlMetaData not implemented")
}
func (UnimplementedMetadataServer) RequestSqlUidMetaData(context.Context, *PSqlUidMetaData) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSqlUidMetaData not implemented")
}
func (UnimplementedMetadataServer) RequestApiMetaData(context.Context, *PApiMetaData) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestApiMetaData not implemented")
}
func (UnimplementedMetadataServer) RequestStringMetaData(context.Context, *PStringMetaData) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStringMetaData not implemented")
}
func (UnimplementedMetadataServer) RequestExceptionMetaData(context.Context, *PExceptionMetaData) (*PResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExceptionMetaData not implemented")
}
func (UnimplementedMetadataServer) mustEmbedUnimplementedMetadataServer() {}
func (UnimplementedMetadataServer) testEmbeddedByValue()                  {}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_RequestSqlMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSqlMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestSqlMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RequestSqlMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestSqlMetaData(ctx, req.(*PSqlMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RequestSqlUidMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSqlUidMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestSqlUidMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RequestSqlUidMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestSqlUidMetaData(ctx, req.(*PSqlUidMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RequestApiMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PApiMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestApiMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RequestApiMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestApiMetaData(ctx, req.(*PApiMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RequestStringMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PStringMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestStringMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RequestStringMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestStringMetaData(ctx, req.(*PStringMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RequestExceptionMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PExceptionMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestExceptionMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RequestExceptionMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestExceptionMetaData(ctx, req.(*PExceptionMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestSqlMetaData",
			Handler:    _Metadata_RequestSqlMetaData_Handler,
		},
		{
			MethodName: "RequestSqlUidMetaData",
			Handler:    _Metadata_RequestSqlUidMetaData_Handler,
		},
		{
			MethodName: "RequestApiMetaData",
			Handler:    _Metadata_RequestApiMetaData_Handler,
		},
		{
			MethodName: "RequestStringMetaData",
			Handler:    _Metadata_RequestStringMetaData_Handler,
		},
		{
			MethodName: "RequestExceptionMetaData",
			Handler:    _Metadata_RequestExceptionMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/Service.proto",
}

const (
	Stat_SendAgentStat_FullMethodName = "/v1.Stat/SendAgentStat"
)

// StatClient is the client API for Stat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatClient interface {
	SendAgentStat(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PStatMessage, emptypb.Empty], error)
}

type statClient struct {
	cc grpc.ClientConnInterface
}

func NewStatClient(cc grpc.ClientConnInterface) StatClient {
	return &statClient{cc}
}

func (c *statClient) SendAgentStat(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PStatMessage, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stat_ServiceDesc.Streams[0], Stat_SendAgentStat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PStatMessage, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stat_SendAgentStatClient = grpc.ClientStreamingClient[PStatMessage, emptypb.Empty]

// StatServer is the server API for Stat service.
// All implementations must embed UnimplementedStatServer
// for forward compatibility.
type StatServer interface {
	SendAgentStat(grpc.ClientStreamingServer[PStatMessage, emptypb.Empty]) error
	mustEmbedUnimplementedStatServer()
}

// UnimplementedStatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatServer struct{}

func (UnimplementedStatServer) SendAgentStat(grpc.ClientStreamingServer[PStatMessage, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendAgentStat not implemented")
}
func (UnimplementedStatServer) mustEmbedUnimplementedStatServer() {}
func (UnimplementedStatServer) testEmbeddedByValue()              {}

// UnsafeStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServer will
// result in compilation errors.
type UnsafeStatServer interface {
	mustEmbedUnimplementedStatServer()
}

func RegisterStatServer(s grpc.ServiceRegistrar, srv StatServer) {
	// If the following call pancis, it indicates UnimplementedStatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stat_ServiceDesc, srv)
}

func _Stat_SendAgentStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatServer).SendAgentStat(&grpc.GenericServerStream[PStatMessage, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stat_SendAgentStatServer = grpc.ClientStreamingServer[PStatMessage, emptypb.Empty]

// Stat_ServiceDesc is the grpc.ServiceDesc for Stat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Stat",
	HandlerType: (*StatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendAgentStat",
			Handler:       _Stat_SendAgentStat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/Service.proto",
}

const (
	ProfilerCommandService_HandleCommand_FullMethodName                  = "/v1.ProfilerCommandService/HandleCommand"
	ProfilerCommandService_HandleCommandV2_FullMethodName                = "/v1.ProfilerCommandService/HandleCommandV2"
	ProfilerCommandService_CommandEcho_FullMethodName                    = "/v1.ProfilerCommandService/CommandEcho"
	ProfilerCommandService_CommandStreamActiveThreadCount_FullMethodName = "/v1.ProfilerCommandService/CommandStreamActiveThreadCount"
	ProfilerCommandService_CommandActiveThreadDump_FullMethodName        = "/v1.ProfilerCommandService/CommandActiveThreadDump"
	ProfilerCommandService_CommandActiveThreadLightDump_FullMethodName   = "/v1.ProfilerCommandService/CommandActiveThreadLightDump"
)

// ProfilerCommandServiceClient is the client API for ProfilerCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilerCommandServiceClient interface {
	// Deprecated: Do not use.
	// deprecated api
	HandleCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PCmdMessage, PCmdRequest], error)
	HandleCommandV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PCmdMessage, PCmdRequest], error)
	CommandEcho(ctx context.Context, in *PCmdEchoResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommandStreamActiveThreadCount(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PCmdActiveThreadCountRes, emptypb.Empty], error)
	CommandActiveThreadDump(ctx context.Context, in *PCmdActiveThreadDumpRes, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommandActiveThreadLightDump(ctx context.Context, in *PCmdActiveThreadLightDumpRes, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type profilerCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilerCommandServiceClient(cc grpc.ClientConnInterface) ProfilerCommandServiceClient {
	return &profilerCommandServiceClient{cc}
}

// Deprecated: Do not use.
func (c *profilerCommandServiceClient) HandleCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PCmdMessage, PCmdRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfilerCommandService_ServiceDesc.Streams[0], ProfilerCommandService_HandleCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PCmdMessage, PCmdRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_HandleCommandClient = grpc.BidiStreamingClient[PCmdMessage, PCmdRequest]

func (c *profilerCommandServiceClient) HandleCommandV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PCmdMessage, PCmdRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfilerCommandService_ServiceDesc.Streams[1], ProfilerCommandService_HandleCommandV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PCmdMessage, PCmdRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_HandleCommandV2Client = grpc.BidiStreamingClient[PCmdMessage, PCmdRequest]

func (c *profilerCommandServiceClient) CommandEcho(ctx context.Context, in *PCmdEchoResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfilerCommandService_CommandEcho_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerCommandServiceClient) CommandStreamActiveThreadCount(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PCmdActiveThreadCountRes, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfilerCommandService_ServiceDesc.Streams[2], ProfilerCommandService_CommandStreamActiveThreadCount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PCmdActiveThreadCountRes, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_CommandStreamActiveThreadCountClient = grpc.ClientStreamingClient[PCmdActiveThreadCountRes, emptypb.Empty]

func (c *profilerCommandServiceClient) CommandActiveThreadDump(ctx context.Context, in *PCmdActiveThreadDumpRes, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfilerCommandService_CommandActiveThreadDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerCommandServiceClient) CommandActiveThreadLightDump(ctx context.Context, in *PCmdActiveThreadLightDumpRes, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfilerCommandService_CommandActiveThreadLightDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilerCommandServiceServer is the server API for ProfilerCommandService service.
// All implementations must embed UnimplementedProfilerCommandServiceServer
// for forward compatibility.
type ProfilerCommandServiceServer interface {
	// Deprecated: Do not use.
	// deprecated api
	HandleCommand(grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]) error
	HandleCommandV2(grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]) error
	CommandEcho(context.Context, *PCmdEchoResponse) (*emptypb.Empty, error)
	CommandStreamActiveThreadCount(grpc.ClientStreamingServer[PCmdActiveThreadCountRes, emptypb.Empty]) error
	CommandActiveThreadDump(context.Context, *PCmdActiveThreadDumpRes) (*emptypb.Empty, error)
	CommandActiveThreadLightDump(context.Context, *PCmdActiveThreadLightDumpRes) (*emptypb.Empty, error)
	mustEmbedUnimplementedProfilerCommandServiceServer()
}

// UnimplementedProfilerCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfilerCommandServiceServer struct{}

func (UnimplementedProfilerCommandServiceServer) HandleCommand(grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]) error {
	return status.Errorf(codes.Unimplemented, "method HandleCommand not implemented")
}
func (UnimplementedProfilerCommandServiceServer) HandleCommandV2(grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]) error {
	return status.Errorf(codes.Unimplemented, "method HandleCommandV2 not implemented")
}
func (UnimplementedProfilerCommandServiceServer) CommandEcho(context.Context, *PCmdEchoResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandEcho not implemented")
}
func (UnimplementedProfilerCommandServiceServer) CommandStreamActiveThreadCount(grpc.ClientStreamingServer[PCmdActiveThreadCountRes, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method CommandStreamActiveThreadCount not implemented")
}
func (UnimplementedProfilerCommandServiceServer) CommandActiveThreadDump(context.Context, *PCmdActiveThreadDumpRes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandActiveThreadDump not implemented")
}
func (UnimplementedProfilerCommandServiceServer) CommandActiveThreadLightDump(context.Context, *PCmdActiveThreadLightDumpRes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandActiveThreadLightDump not implemented")
}
func (UnimplementedProfilerCommandServiceServer) mustEmbedUnimplementedProfilerCommandServiceServer() {
}
func (UnimplementedProfilerCommandServiceServer) testEmbeddedByValue() {}

// UnsafeProfilerCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilerCommandServiceServer will
// result in compilation errors.
type UnsafeProfilerCommandServiceServer interface {
	mustEmbedUnimplementedProfilerCommandServiceServer()
}

func RegisterProfilerCommandServiceServer(s grpc.ServiceRegistrar, srv ProfilerCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfilerCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfilerCommandService_ServiceDesc, srv)
}

func _ProfilerCommandService_HandleCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfilerCommandServiceServer).HandleCommand(&grpc.GenericServerStream[PCmdMessage, PCmdRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_HandleCommandServer = grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]

func _ProfilerCommandService_HandleCommandV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfilerCommandServiceServer).HandleCommandV2(&grpc.GenericServerStream[PCmdMessage, PCmdRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_HandleCommandV2Server = grpc.BidiStreamingServer[PCmdMessage, PCmdRequest]

func _ProfilerCommandService_CommandEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PCmdEchoResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerCommandServiceServer).CommandEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfilerCommandService_CommandEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerCommandServiceServer).CommandEcho(ctx, req.(*PCmdEchoResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilerCommandService_CommandStreamActiveThreadCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfilerCommandServiceServer).CommandStreamActiveThreadCount(&grpc.GenericServerStream[PCmdActiveThreadCountRes, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfilerCommandService_CommandStreamActiveThreadCountServer = grpc.ClientStreamingServer[PCmdActiveThreadCountRes, emptypb.Empty]

func _ProfilerCommandService_CommandActiveThreadDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PCmdActiveThreadDumpRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerCommandServiceServer).CommandActiveThreadDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfilerCommandService_CommandActiveThreadDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerCommandServiceServer).CommandActiveThreadDump(ctx, req.(*PCmdActiveThreadDumpRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilerCommandService_CommandActiveThreadLightDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PCmdActiveThreadLightDumpRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerCommandServiceServer).CommandActiveThreadLightDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfilerCommandService_CommandActiveThreadLightDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerCommandServiceServer).CommandActiveThreadLightDump(ctx, req.(*PCmdActiveThreadLightDumpRes))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilerCommandService_ServiceDesc is the grpc.ServiceDesc for ProfilerCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilerCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProfilerCommandService",
	HandlerType: (*ProfilerCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandEcho",
			Handler:    _ProfilerCommandService_CommandEcho_Handler,
		},
		{
			MethodName: "CommandActiveThreadDump",
			Handler:    _ProfilerCommandService_CommandActiveThreadDump_Handler,
		},
		{
			MethodName: "CommandActiveThreadLightDump",
			Handler:    _ProfilerCommandService_CommandActiveThreadLightDump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleCommand",
			Handler:       _ProfilerCommandService_HandleCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HandleCommandV2",
			Handler:       _ProfilerCommandService_HandleCommandV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CommandStreamActiveThreadCount",
			Handler:       _ProfilerCommandService_CommandStreamActiveThreadCount_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/Service.proto",
}
